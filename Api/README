# Servicio de Clasificación de Vinos con FastAPI

## Descripción
Servicio de clasificación de vinos implementado con FastAPI y desplegado mediante Docker Compose. El servicio utiliza un modelo de Random Forest para realizar predicciones sobre la clasificación de vinos basado en sus características químicas.

## Arquitectura
- **Framework**: FastAPI
- **Contenedorización**: Docker
- **Orquestación**: Docker Compose
- **Modelo**: Random Forest (scikit-learn)
- **Red**: Bridge network dedicada

## Requisitos Previos
- Docker Engine (versión 20.10.0+)
- Docker Compose (versión 2.0.0+)
- 500MB de espacio en disco (mínimo)
- Modelo entrenado (`random_forest_model.pkl`)

## Estructura del Proyecto
```
Api/
├── docker/
│   ├── Dockerfile
│   └── requirements.txt
├── docker-compose.yaml
├── api_app.py
└── README
```

## Instalación y Despliegue

### 1. Construir la Imagen
```bash
# Desde la raíz del proyecto
docker build -t fastapi-wine-classifier:1.0 -f Api/docker/Dockerfile .
```

### 2. Desplegar con Docker Compose
```bash
# Iniciar el servicio
docker-compose -f Api/docker-compose.yaml up -d

# Verificar el estado
docker-compose -f Api/docker-compose.yaml ps

# Ver logs
docker-compose -f Api/docker-compose.yaml logs -f

# Detener el servicio
docker-compose -f Api/docker-compose.yaml down
```

## Uso del Servicio

### Endpoints Disponibles

#### Health Check
```bash
curl http://localhost:8000/health
```
Respuesta esperada:
```json
{
    "status": "OK",
    "message": "El servicio está funcionando correctamente"
}
```

#### Predicción
```bash
curl -X POST "http://localhost:8000/predict" \
     -H "Content-Type: application/json" \
     -d '{
           "alcohol": 12.72,
           "malic_acid": 1.81,
           "ash": 2.2,
           "alcalinity_of_ash": 18.8,
           "magnesium": 99,
           "total_phenols": 2.6,
           "flavanoids": 2.3,
           "nonflavanoid_phenols": 0.26,
           "proanthocyanins": 1.86,
           "color_intensity": 4.38,
           "hue": 1.05,
           "od280_od315": 2.95,
           "proline": 1045
         }'
```

Respuesta esperada:
```json
{
    "prediction": 1,
    "wine_type": "Tipo 1 - Vino de alta calidad"
}
```

## Monitoreo y Mantenimiento

### Logs
```bash
# Ver logs en tiempo real
docker-compose -f Api/docker-compose.yaml logs -f

# Ver últimas 100 líneas
docker-compose -f Api/docker-compose.yaml logs --tail 100
```

### Healthcheck
El servicio incluye healthchecks automáticos configurados en docker-compose.yaml:
- Intervalo: 30 segundos
- Timeout: 10 segundos
- Retries: 3

### Actualización del Servicio
```bash
# Actualizar a nueva versión
docker-compose -f Api/docker-compose.yaml down
docker build -t fastapi-wine-classifier:1.0 -f Api/docker/Dockerfile .
docker-compose -f Api/docker-compose.yaml up -d
```

## Configuración Técnica

### Networking
- **Red**: microservices-net (creada automáticamente por Docker Compose)
- **Tipo**: bridge
- **Alias**: fastapi-service

### Volúmenes
- Modelo ML: montado desde la ubicación local del modelo a `/app/random_forest_model.pkl`

### Puertos
- Externo: 8000
- Interno: 8000

## Solución de Problemas

### Problemas Comunes

1. **El servicio no inicia**
   ```bash
   docker-compose -f Api/docker-compose.yaml logs
   ```
   Verificar:
   - Existencia del archivo del modelo en la ruta correcta
   - Puerto 8000 disponible
   - Permisos de lectura del modelo

2. **Error en predicciones**
   - Verificar formato del JSON de entrada
   - Validar que todos los campos requeridos estén presentes
   - Comprobar que los valores estén en rangos válidos

### Reinicio del Servicio
```bash
docker-compose -f Api/docker-compose.yaml restart
```

## Seguridad
- El servicio está configurado para ejecutarse en modo producción
- Se recomienda implementar autenticación para el endpoint de predicción
- Los logs no contienen información sensible

## Contribución
Para contribuir al proyecto:
1. Fork del repositorio
2. Crear rama feature (`git checkout -b feature/nueva-caracteristica`)
3. Commit cambios (`git commit -am 'Añadir nueva característica'`)
4. Push a la rama (`git push origin feature/nueva-caracteristica`)
5. Crear Pull Request

## Licencia
[Especificar licencia]

## Contacto
[Información de contacto del equipo]