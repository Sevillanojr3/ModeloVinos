# Servicio gRPC de Predicción de Vinos

Este servicio implementa un predictor de calidad de vinos usando gRPC y machine learning.

## 📁 Estructura del Proyecto

```
GRP/
├── docker/                  # Configuración Docker
│   ├── dockerfile          # Definición de imagen
│   ├── requirements.txt    # Dependencias Python
│   ├── buildAll.sh        # Script construcción
│   ├── runAll.sh          # Script ejecución
│   └── stopAll.sh         # Script detención
├── models/                 # Directorio modelos ML
│   └── random_forest_model.pkl
├── *.py                    # Archivos Python del servicio
├── *.proto                 # Definición del servicio gRPC
├── docker-compose.yaml     # Configuración Docker Compose
└── README.md
```

## 🚀 Inicio Rápido

1. Preparación del entorno:
```bash
# Crear directorio para modelos
mkdir -p models

# Dar permisos de ejecución a scripts
chmod +x docker/*.sh

# Copiar tu modelo de ML
cp /ruta/a/tu/modelo/random_forest_model.pkl models/
```

2. Construir y ejecutar:
```bash
# Construir imagen
cd docker && ./buildAll.sh

# Iniciar servicio
docker-compose up -d
```

3. Verificar funcionamiento:
```bash
# Comprobar estado
docker-compose ps

# Ver logs
docker-compose logs -f
```

## 🔧 Configuración

### Variables de Entorno
```yaml
GRPC_PORT: 50051          # Puerto gRPC
APP_ENV: production       # Entorno de ejecución
MODEL_PATH: /app/models/random_forest_model.pkl
PYTHONUNBUFFERED: 1      # Logs sin buffer
```

### Puertos
- **50051**: Puerto principal gRPC

### Volúmenes
- `./models:/app/models`: Montaje de modelos ML

## 🧪 Pruebas

1. Usando el cliente de prueba:
```bash
python test_client.py
```

2. Usando grpcurl:
```bash
grpcurl -plaintext localhost:50051 wine.WinePredictor/CheckHealth
```

## 📦 Docker Compose

```yaml
version: '3.8'
services:
  wine-predictor:
    image: microservicio-grpc:1.0
    ports:
      - "50051:50051"
    volumes:
      - ./models:/app/models
    environment:
      - GRPC_PORT=50051
      - MODEL_PATH=/app/models/random_forest_model.pkl
    networks:
      - microservices-net
```

## 🛠️ Scripts Disponibles

### Docker
- `buildAll.sh`: Construye la imagen Docker
- `runAll.sh`: Inicia el servicio
- `stopAll.sh`: Detiene el servicio

### Comandos Docker Compose
```bash
# Iniciar servicio
docker-compose up -d

# Detener servicio
docker-compose down

# Ver logs
docker-compose logs -f
```

## ⚠️ Solución de Problemas

### Problemas Comunes

1. **Servicio no inicia**
   - Verificar puerto 50051 disponible
   - Comprobar existencia del modelo
   - Revisar logs: `docker-compose logs -f`

2. **Errores de imagen**
   - "Image not found": Ejecutar `buildAll.sh`
   - Verificar nombre correcto de imagen

3. **Problemas de red**
   - Crear red: `docker network create microservices-net`
   - Verificar redes: `docker network ls`

### Verificación de Estado
```bash
# Estado del contenedor
docker-compose ps

# Logs del servicio
docker-compose logs -f wine-predictor

# Health check
grpcurl -plaintext localhost:50051 wine.WinePredictor/CheckHealth
```

## 📋 Requisitos

- Docker 20.10+
- Docker Compose 2.0+
- Modelo ML entrenado (random_forest_model.pkl)
- 2GB RAM mínimo
- Puerto 50051 disponible

## 🔒 Seguridad

- El servicio corre en modo no seguro (gRPC plaintext)
- No exponer directamente a internet
- Considerar implementar TLS para producción

## 📝 Notas Adicionales

- Los logs están habilitados por defecto
- El servicio está configurado para producción
- El modelo debe estar presente en `models/` antes de iniciar
- La red `microservices-net` se crea automáticamente

## 🤝 Contribuciones

Para contribuir:
1. Fork del repositorio
2. Crear rama feature (`git checkout -b feature/AmazingFeature`)
3. Commit cambios (`git commit -m 'Add AmazingFeature'`)
4. Push a la rama (`git push origin feature/AmazingFeature`)
5. Abrir Pull Request```
